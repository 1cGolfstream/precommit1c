#Использовать cmdline
#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать v8runner
#Использовать strings

Перем Лог;
Перем КодВозврата;
Перем мВозможныеКоманды;

Функция ВозможныеКоманды()
	
	Если мВозможныеКоманды = Неопределено Тогда
		мВозможныеКоманды = Новый Структура;
		мВозможныеКоманды.Вставить("Декомпилировать", "--decompile");
		мВозможныеКоманды.Вставить("Помощь", "--help");
		мВозможныеКоманды.Вставить("ОбработатьИзмененияИзГит", "--git-precommit");
		мВозможныеКоманды.Вставить("Компилировать", "--compile");
	КонецЕсли;
	
	Возврат мВозможныеКоманды;
	
КонецФункции

Функция ЗапускВКоманднойСтроке()
	
	КодВозврата = 0;
	
	Если ТекущийСценарий().Источник <> СтартовыйСценарий().Источник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
	
		Парсер = Новый ПарсерАргументовКоманднойСтроки();
		
		ДобавитьОписаниеКомандыДекомпилировать(Парсер);
		ДобавитьОписаниеКомандыПомощь(Парсер);
		ДобавитьОписаниеКомандыИзмененияПоЖурналуГит(Парсер);
		ДобавитьОписаниеКомандыКомпилировать(Парсер);

		Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);
		
		Команда = Аргументы.Команда;
		Лог.Отладка("Передана команда: "+Команда);
		Для Каждого Параметр Из Аргументы.ЗначенияПараметров Цикл
			Лог.Отладка(Параметр.Ключ + " = " + Параметр.Значение);
		КонецЦикла;
		
		Если Команда = ВозможныеКоманды().Декомпилировать Тогда
			Декомпилировать(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], Аргументы.ЗначенияПараметров["ВыходнойКаталог"]);
		ИначеЕсли Команда = ВозможныеКоманды().Помощь Тогда
			ВывестиСправку();
		ИначеЕсли Команда = ВозможныеКоманды().ОбработатьИзмененияИзГит Тогда
			ОбработатьИзмененияИзГит(Аргументы.ЗначенияПараметров["ВыходнойКаталог"]);
		ИначеЕсли Команда = ВозможныеКоманды().Компилировать Тогда
			Компилировать(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], Аргументы.ЗначенияПараметров["ВыходнойКаталог"], Аргументы.ЗначенияПараметров["--type"]);
		КонецЕсли;
		
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		КодВозврата = 1;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьОписаниеКомандыДекомпилировать(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Декомпилировать);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыПомощь(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Помощь);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыИзмененияПоЖурналуГит(Знач Парсер)
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ОбработатьИзмененияИзГит);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыКомпилировать(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Компилировать);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--type");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("oscript.app.v8files-extractor");
	//Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////
// РЕАЛИЗАЦИЯ КОМАНД

Процедура Декомпилировать(Знач Путь, Знач КаталогВыгрузки) Экспорт
	Файл = Новый Файл(Путь);
	Если Файл.ЭтоКаталог() Тогда
		РазобратьКаталог(Файл.ПолноеИмя, КаталогВыгрузки);
	Иначе
		РазобратьФайл(Файл.ПолноеИмя, КаталогВыгрузки);
	КонецЕсли;
КонецПроцедуры

Процедура РазобратьКаталог(Знач ПутьКаталога, Знач КаталогВыгрузки) Экспорт
	Лог.Информация("Подготовка выгрузки каталога "+ПутьКаталога+" в каталог " + КаталогВыгрузки);
	РазобратьКаталогВнутр(ПутьКаталога, КаталогВыгрузки);
	Лог.Информация("Завершена выгрузки каталога "+ПутьКаталога+" в каталог " + КаталогВыгрузки);
КонецПроцедуры

Функция РазобратьФайл(Знач ПутьФайла, Знач КаталогВыгрузки) Экспорт
	Лог.Информация("Подготовка выгрузки файла "+ПутьФайла+" в каталог " + КаталогВыгрузки);
	
	КаталогИсходников = РазобратьФайлВнутр(ПутьФайла, КаталогВыгрузки);
	
	Лог.Информация("Завершена выгрузка файла "+ПутьФайла+" в каталог " + КаталогВыгрузки);
	
	Возврат КаталогИсходников;
	
КонецФункции

Процедура РазобратьКаталогВнутр(Знач ПутьКаталога, Знач КаталогВыгрузки)
	ОбъектКаталога = Новый Файл(ПутьКаталога);
	ИмяКаталогаВыгрузки = Новый Файл(КаталогВыгрузки).Имя;
	Лог.Информация("Вошел в каталог "+ОбъектКаталога.Имя);
	
	Файлы = НайтиФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			РазобратьКаталогВнутр(Файл.ПолноеИмя, ОбъединитьПути(КаталогВыгрузки, Файл.Имя));
		ИначеЕсли ТипФайлаПоддерживается(Файл) Тогда
			Лог.Информация("Подготовка выгрузки файла "+Файл.Имя+" в каталог " + ИмяКаталогаВыгрузки);
			РазобратьФайлВнутр(Файл.ПолноеИмя, КаталогВыгрузки);
			Лог.Информация("Завершена выгрузка файла "+Файл.Имя+" в каталог " + ИмяКаталогаВыгрузки);
		КонецЕсли;
	КонецЦикла;
	
	Лог.Информация("Вышел из каталога "+ОбъектКаталога.Имя);
КонецПроцедуры

Функция ТипФайлаПоддерживается(Файл)
	Если ПустаяСтрока(Файл.Расширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поз = Найти(".epf,.erf,", Файл.Расширение+",");
	Возврат Поз > 0;
	
КонецФункции

Функция РазобратьФайлВнутр(Знач ПутьФайла, Знач КаталогВыгрузки)
	
	Файл = Новый Файл(ПутьФайла);
	Если Не ТипФайлаПоддерживается(Файл) Тогда
		ВызватьИсключение "Тип файла """+Файл.Расширение+""" не поддерживается";
	КонецЕсли;
	
	Ожидаем.Что(Файл.Существует(), "Файл " + ПутьФайла + " должен существовать").ЭтоИстина();
	
	ПапкаИсходников = Новый Файл(ОбъединитьПути(КаталогВыгрузки, Файл.ИмяБезРасширения));
	ОбеспечитьПустойКаталог(ПапкаИсходников);
	ЗапуститьРаспаковку(Файл, ПапкаИсходников);
	
	Возврат ПапкаИсходников.ПолноеИмя;
	
КонецФункции

Процедура ЗапуститьРаспаковку(Знач Файл, Знач ПапкаИсходников)
	
	Лог.Отладка("Запускаем распаковку файла");
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();
	Параметры[0] = "ENTERPRISE";
	
	ПутьV8Reader = ОбъединитьПути(ТекущийСценарий().Каталог, "v8Reader", "V8Reader.epf");
	Лог.Отладка("Путь к V8Reader: " + ПутьV8Reader);
	Ожидаем.Что(Новый Файл(ПутьV8Reader).Существует()).ЭтоИстина();
	
	КоманднаяСтрокаV8Reader = СтрЗаменить("/C""decompile;pathtocf;%1;pathout;%2;convert-mxl2txt;ЗавершитьРаботуПосле;""","%1", Файл.ПолноеИмя);
	КоманднаяСтрокаV8Reader = СтрЗаменить(КоманднаяСтрокаV8Reader,"%2", ПапкаИсходников.ПолноеИмя);
	
	Лог.Отладка("Командная строка V8Reader: " + КоманднаяСтрокаV8Reader);

	Параметры.Добавить("/RunModeOrdinaryApplication");
	Параметры.Добавить("/Execute """ + ПутьV8Reader + """");
	Параметры.Добавить(КоманднаяСтрокаV8Reader);
	
	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
	Лог.Отладка("Очищаем каталог временной ИБ");
	ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
	
КонецПроцедуры

Процедура ОбеспечитьПустойКаталог(Знач ФайлОбъектКаталога)
	
	Если Не ФайлОбъектКаталога.Существует() Тогда
		Лог.Отладка("Создаем новый каталог " + ФайлОбъектКаталога.ПолноеИмя);
		СоздатьКаталог(ФайлОбъектКаталога.ПолноеИмя);
	ИначеЕсли ФайлОбъектКаталога.ЭтоКаталог() Тогда
		Лог.Отладка("Очищаем каталог " + ФайлОбъектКаталога.ПолноеИмя);
		УдалитьФайлы(ФайлОбъектКаталога.ПолноеИмя, ПолучитьМаскуВсеФайлы());
	Иначе
		ВызватьИсключение "Путь " + ФайлОбъектКаталога.ПолноеИмя + " не является каталогом. Выгрузка невозможна";
	КонецЕсли;
	
КонецПроцедуры


Процедура ВывестиСправку()
	Сообщить("Утилита сборки/разборки внешних файлов 1С");
	Сообщить(" ");
	Сообщить("Параметры командной строки:");
	Сообщить("	--decompile inputPath outputPath");
	Сообщить("		Разбор файлов на исходники");
	
	Сообщить("	--help");
	Сообщить("		Показ этого экрана");
	Сообщить("	--git-precommit outputPath");
	Сообщить("		Запустить чтение индекса из git и определить список файлов для разбора, разложить их и добавить исходники в индекс");
	Сообщить("	--compile inputPath outputPath [--type TYPE]");
	Сообщить("		Собрать внешний файл/обработку.");
	Сообщить("		В параметре --type указывается тип файла для сборки (epf/erf). Значение по умолчанию - epf");
КонецПроцедуры


Процедура ОбработатьИзмененияИзГит(Знач ВыходнойКаталог)
	
	Если ПустаяСтрока(ВыходнойКаталог) Тогда
		ВыходнойКаталог = "src";
	КонецЕсли;
	
	ЖурналИзмененийГитСтрокой = ПолучитьЖурналИзмененийГит();
	ИменаФайлов = ПолучитьИменаИзЖурналаИзмененийГит(ЖурналИзмененийГитСтрокой);
	
	КореньРепо = ТекущийКаталог();
	КаталогИсходников = ОбъединитьПути(КореньРепо, ВыходнойКаталог);
	СписокНовыхКаталогов = Новый Массив;
	Для Каждого Файл Из ИменаФайлов Цикл
		Лог.Отладка("Изучаю файл из журнала git " + Файл);
		Если ТипФайлаПоддерживается(Новый Файл(Файл)) Тогда
			Лог.Отладка("Получен из журнала git файл " + Файл);
			ПолныйПуть = ОбъединитьПути(КореньРепо, Файл);
			СписокНовыхКаталогов.Добавить(РазобратьФайл(ПолныйПуть, КаталогИсходников));
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьИсходникиВГит(СписокНовыхКаталогов);
	
КонецПроцедуры

Функция ПолучитьЖурналИзмененийГит()
	
	Перем КодВозврата;
	
	Лог.Отладка("Запускаю git diff-index");
	Вывод = ПолучитьВыводПроцесса("git diff-index --name-status --cached HEAD -z", КодВозврата);
	Лог.Отладка("Вывод git diff-index: " + Вывод);
	Если КодВозврата <> 0 Тогда
		Лог.Отладка("Запускаю git status");
		Вывод = ПолучитьВыводПроцесса("git status --porcelain -z", КодВозврата);
		Лог.Отладка("Вывод git status: " + Вывод);
		
		Если КодВозврата <> 0 Тогда
			ВызватьИсключение "Не удалось собрать журнал изменений git";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Вывод;
	
КонецФункции

Функция ПолучитьВыводПроцесса(Знач КоманднаяСтрока, КодВозврата)
	
	// Это для dev версии 1.0.11
	//Процесс = СоздатьПроцесс(КоманднаяСтрока, , Истина,, КодировкаТекста.UTF8);
	// Процесс.Запустить();
	// Вывод = "";
	
	// Процесс.ОжидатьЗавершения();
	
	// Вывод = Вывод + Процесс.ПотокВывода.Прочитать();
	// Вывод = Вывод + Процесс.ПотокОшибок.Прочитать();
	
	// КодВозврата = Процесс.КодВозврата;
	
	ЛогФайл = ВременныеФайлы.НовоеИмяФайла();
	СтрокаЗапуска = "cmd /C """ + КоманднаяСтрока + " > """ + ЛогФайл + """ 2>&1""";
	Лог.Отладка(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	Лог.Отладка("Код возврата: " + КодВозврата);
	ЧтениеТекста = Новый ЧтениеТекста(ЛогФайл, "utf-8");
	Вывод = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ВременныеФайлы.УдалитьФайл(ЛогФайл);
	
	Возврат Вывод;
	
КонецФункции

Функция ПолучитьИменаИзЖурналаИзмененийГит(Знач ЖурналИзмененийГит) Экспорт
	МассивИмен = Новый Массив;
	Если Найти(ЖурналИзмененийГит, Символы.ПС) > 0 Тогда
		МассивСтрокЖурнала = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЖурналИзмененийГит, Символы.ПС);
	Иначе
		ЖурналИзмененийГит = СтрЗаменить(ЖурналИзмененийГит, "A"+Символ(0), "A"+" ");
		ЖурналИзмененийГит = СтрЗаменить(ЖурналИзмененийГит, "M"+Символ(0), "M"+" ");
		ЖурналИзмененийГит = СтрЗаменить(ЖурналИзмененийГит, Символ(0), Символы.ПС);
		МассивСтрокЖурнала = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЖурналИзмененийГит, Символы.ПС); //Символ(0));
	КонецЕсли;
	
	Лог.Отладка("ЖурналИзмененийГит:");
	Для Каждого СтрокаЖурнала Из МассивСтрокЖурнала Цикл
		Лог.Отладка("	<"+СтрокаЖурнала +">");
		СтрокаЖурнала = СокрЛ(СтрокаЖурнала);
		СимволИзменений = Лев(СтрокаЖурнала, 1);
		Если СимволИзменений = "A" или СимволИзменений = "M" Тогда
			ИмяФайла = СокрЛП(Сред(СтрокаЖурнала, 2));
			ИмяФайла = СтрЗаменить(ИмяФайла, Символ(0), "");
			МассивИмен.Добавить(ИмяФайла);
			Лог.Отладка("		В журнале git найдено имя файла <"+ИмяФайла+">");
		КонецЕсли;
	КонецЦикла;
	Возврат МассивИмен;
КонецФункции

Процедура ДобавитьИсходникиВГит(Знач СписокНовыхКаталогов)

	Перем КодВозврата;
	
	Для Каждого Каталог Из СписокНовыхКаталогов Цикл
		
		Лог.Отладка("Запуск git add для каталога " + Каталог);
		Вывод = ПолучитьВыводПроцесса("git add --all " + Каталог, КодВозврата);
		Лог.Отладка("Вывод git add: " + Вывод);
		Если КодВозврата <> 0 Тогда
			Лог.Ошибка(Вывод);
			ЗавершитьРаботу(КодВозврата);
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

Функция Компилировать(Знач Путь, Знач КаталогВыгрузки, Знач ТипФайла)

	Если ТипФайла = Неопределено Тогда
		ТипФайла = "epf";
	КонецЕсли;

	ПутьКИсходникам = ОбъединитьПути(ТекущийКаталог(), Путь);
 
	ПапкаИсходников = Новый Файл(ПутьКИсходникам);
	ИмяПапки = ПапкаИсходников.Имя;
	
	Ожидаем.Что(ПапкаИсходников.Существует(), "Папка " + ПутьКИсходникам + " должна существовать").ЭтоИстина();
	Ожидаем.Что(ПапкаИсходников.ЭтоКаталог(), "Путь " + ПутьКИсходникам + "должен быть каталогом").ЭтоИстина();
	
	ФайлПереименования = Новый Файл(ОбъединитьПути(ПутьКИсходникам, "renames.txt"));
	Ожидаем.Что(ФайлПереименования.Существует(), "Файл переименования " + ФайлПереименования.ПолноеИмя + " должен существовать").ЭтоИстина();
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	ЧтениеТекста = Новый ЧтениеТекста(ФайлПереименования.ПолноеИмя, КодировкаТекста.UTF8);
	СтрокаПереименования = ЧтениеТекста.ПрочитатьСтроку();
	Пока СтрокаПереименования <> Неопределено Цикл

		СтрокаПереименованияВрем = СтрокаПереименования;
		СтрокаПереименования = ЧтениеТекста.ПрочитатьСтроку();

		// Проверка на BOM?

		СписокСтрок = СтрРазделить(СтрокаПереименованияВрем, "-->");
		Если СписокСтрок.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;

		Лог.Отладка(СтрокаПереименованияВрем);

		НовыйПуть = ОбъединитьПути(ВременныйКаталог, СписокСтрок[0]);
		НовыйКаталог = Новый Файл(НовыйПуть);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйПуть);
		КонецЕсли;

		СтарыйПуть = ОбъединитьПути(ПутьКИсходникам, СписокСтрок[1]);
		СтарыйКаталог = Новый Файл(СтарыйПуть);
		Если СтарыйКаталог.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(СтарыйПуть, НовыйПуть);
		Иначе
			Лог.Отладка(СтарыйПуть);
			// Нормализовать путь?
		КонецЕсли;

	КонецЦикла;

	// Вызов v8unpack для сборки файла из исходников
	ВременныйФайл = ВременныеФайлы.СоздатьФайл(ТипФайла);
	ПутьЗапаковщика = ПолучитьПутьПрограммыИзСистемныхПутейЗапускаPath("v8unpack");
	Если НЕ ЗначениеЗаполнено(ПутьЗапаковщика) Тогда
		ПутьЗапаковщика = ПолучитьПутьПрограммыИзСистемныхПутейЗапускаPath("unpackv8");
	КонецЕсли;

	Ожидаем.Что(ПутьЗапаковщика, "Не найден путь к v8unpack").Не_().ИмеетДлину(0);

	КомандаЗапуска = "%1 -B ""%2"" ""%3""";
	КомандаЗапуска = СтрШаблон(КомандаЗапуска, ПутьЗапаковщика, ВременныйКаталог, ВременныйФайл);
	Лог.Отладка(КомандаЗапуска);

	Процесс = СоздатьПроцесс(КомандаЗапуска, , Истина, , КодировкаТекста.UTF8);
	Процесс.Запустить();
	Процесс.ОжидатьЗавершения();
	
	ВыводПроцесса = Процесс.ПотокВывода.Прочитать();
	Ожидаем.Что(Процесс.КодВозврата, "Не удалось упаковать каталог " + ВременныйКаталог + Символы.ПС + ВыводПроцесса).Равно(0);
	Лог.Отладка(ВыводПроцесса);
	
	Лог.Отладка(СтрШаблон("Копирование из %1 в %2", ВременныйФайл, КаталогВыгрузки));
	ИмяФайлаОбъекта = ОбъединитьПути(КаталогВыгрузки, ИмяПапки + "." + ТипФайла);
	ФайлОбъекта = Новый Файл(ИмяФайлаОбъекта);
	Если ФайлОбъекта.Существует() Тогда
		УдалитьФайлы(ИмяФайлаОбъекта);
	КонецЕсли;
	
	ПереместитьФайл(ВременныйФайл, ИмяФайлаОбъекта);

	ВременныеФайлы.УдалитьФайл(ВременныйКаталог);
	ВременныеФайлы.УдалитьФайл(ВременныйФайл);

	Возврат ИмяФайлаОбъекта;

КонецФункции

Процедура КопироватьСодержимоеКаталога(Откуда, Куда)
	
	КаталогНазначения = Новый Файл(Куда);
	Если КаталогНазначения.Существует() Тогда
		Если КаталогНазначения.ЭтоФайл() Тогда
			УдалитьФайлы(КаталогНазначения.ПолноеИмя);
			СоздатьКаталог(Куда);
		КонецЕсли;
	Иначе
		СоздатьКаталог(Куда);
	КонецЕсли;

	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПутьПрограммыИзСистемныхПутейЗапускаPath(ИмяФайла)
	
	НайденныеФайлы = Новый Массив;
	Расширение = "";

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;
	Если ЭтоWindows Тогда
		Расширение = ".exe";
	КонецЕсли;

	ПапкаПоиска = СистемнаяИнформация.ПолучитьПеременнуюСреды("PATH");
	РазделительПапок = ";"; 
	СписокПапок = СтрРазделить(ПапкаПоиска, РазделительПапок);
	Для сч = 0 По СписокПапок.ВГраница() Цикл

		ПроверяемаяПапка = СписокПапок[сч];
		
		// На Windows папка может быть обернута в кавычки, сбросим их
		Если ЭтоWindows 
				И СтрДлина(ПроверяемаяПапка) >= 2 
				И Лев(ПроверяемаяПапка, 1) = """"
				И Прав(ПроверяемаяПапка, 1) = """" Тогда
			ПроверяемаяПапка = Сред(ПроверяемаяПапка, 2, СтрДлина(ПроверяемаяПапка) - 2);
		КонецЕсли;

		ПутьПоиска = ОбъединитьПути(ПроверяемаяПапка, ИмяФайла + Расширение);
		ФайлПоиска = Новый Файл(ПутьПоиска);
		Если ФайлПоиска.Существует() И НайденныеФайлы.Найти(ПутьПоиска) = Неопределено Тогда
			НайденныеФайлы.Добавить(ПутьПоиска);
		КонецЕсли;

	КонецЦикла;

	НайденныйФайл = "";
	Если НайденныеФайлы.Количество() > 0 Тогда
		НайденныйФайл = НайденныеФайлы[0];
	КонецЕсли;

	Возврат НайденныйФайл;

КонецФункции

Инициализация();

Если ЗапускВКоманднойСтроке() Тогда
	ЗавершитьРаботу(КодВозврата);
КонецЕсли;


