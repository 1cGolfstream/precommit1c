#Использовать tempfiles
#Использовать asserts

Перем юТест;

Процедура Инициализация()
		
КонецПроцедуры

Функция ПолучитьСписокТестов(Знач Контекст) Экспорт
	
	юТест = Контекст;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("Тест_ДолженРазложитьФайлОбработкиИзЗаданнойПапки");
	ВсеТесты.Добавить("Тест_ДолженРазложитьКаталогСВложеннымиКаталогами");
	ВсеТесты.Добавить("Тест_ДолженРазобратьФайлыПоЖурналуИзмененийГит");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПослеЗапускаТеста() Экспорт
	ВременныеФайлы.Удалить();
КонецПроцедуры

Функция ЗагрузитьИсполнителя()
	
	ИмяКаталога = ТекущийСценарий().Каталог;
	Исполнитель = ЗагрузитьСценарий(ОбъединитьПути(ИмяКаталога,"../v8files-extractor.os"));
	Лог = Логирование.ПолучитьЛог("oscript.app.v8files-extractor");
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	Возврат Исполнитель;
	
КонецФункции

Функция ПолучитьФайлТестовойОбработки()
	
	ИмяКаталога = ТекущийСценарий().Каталог;
	ИмяФайла = "Fixture";
	ИмяФайлаСРасширением = ИмяФайла+".epf";
	
	ПутьФайла = ОбъединитьПути(ИмяКаталога, ИмяФайлаСРасширением);
	ФайлОбработки = Новый Файл(ПутьФайла);
	Ожидаем.Что(ФайлОбработки.Существует(), "Исходный файл должен существовать").ЭтоИстина();
	
	Возврат ФайлОбработки;
	
КонецФункции

Процедура Тест_ДолженРазложитьФайлОбработкиИзЗаданнойПапки() Экспорт

	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();
	
	Исполнитель = ЗагрузитьИсполнителя();
	Исполнитель.РазобратьФайл(Новый Файл(ФайлОбработки.ПолноеИмя), КаталогВыгрузки, ФайлОбработки.Путь);
	
	КаталогИсходников = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ФайлОбработки.ИмяБезРасширения));
	Ожидаем.Что(КаталогИсходников.Существует()).ЭтоИстина();
	Ожидаем.Что(КаталогИсходников.ЭтоКаталог(), "Должны были найти каталог с именем обработки").ЭтоИстина();
	Ожидаем.Что(КаталогСодержитИсходникиОбработки(КаталогИсходников.ПолноеИмя), "ожидаем, что КаталогСодержитИсходникиОбработки(КаталогИсходников.ПолноеИмя) это Истина").ЭтоИстина();
КонецПроцедуры

Процедура Тест_ДолженРазложитьКаталогСВложеннымиКаталогами() Экспорт

	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	ИмяВложенногоКаталога = "1";
	
	КаталогИсходников = ВременныеФайлы.СоздатьКаталог();
	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();

	СоздатьКаталог(ОбъединитьПути(КаталогИсходников, ИмяВложенногоКаталога));
	
	ВложенныйКаталогИсходников = ОбъединитьПути(КаталогИсходников, ИмяВложенногоКаталога);
	ПутьВложеннойОбработки = ОбъединитьПути(ВложенныйКаталогИсходников, ФайлОбработки.Имя);

	КопироватьФайл(ФайлОбработки.ПолноеИмя, ПутьВложеннойОбработки);
	
	ФайлВложеннойОбработки = Новый Файл(ПутьВложеннойОбработки);
	Ожидаем.Что(ФайлВложеннойОбработки.Существует(), "Должны были найти имя вложенной обработки").ЭтоИстина();
	Ожидаем.Что(ФайлВложеннойОбработки.ЭтоФайл(), "Должны были найти признак файла для вложенной обработки").ЭтоИстина();
	
	Исполнитель = ЗагрузитьИсполнителя();
	Исполнитель.РазобратьКаталог(Новый Файл(КаталогИсходников), КаталогВыгрузки, КаталогИсходников);
	
	ВложенныйКаталогВыгрузки = ОбъединитьПути(КаталогВыгрузки, ИмяВложенногоКаталога);
	
	ФайлВложенныйКаталогВыгрузки= Новый Файл(ВложенныйКаталогВыгрузки);
	Ожидаем.Что(ФайлВложенныйКаталогВыгрузки.Существует(), "Должны были найти имя вложенного каталога").ЭтоИстина();
	Ожидаем.Что(ФайлВложенныйКаталогВыгрузки.ЭтоКаталог(), "Должны были найти вложенный каталог").ЭтоИстина();

	ПутьКаталогаВыгрузкиДляОбработки = ОбъединитьПути(ВложенныйКаталогВыгрузки, ФайлОбработки.ИмяБезРасширения);
	Ожидаем.Что(КаталогСодержитИсходникиОбработки(ПутьКаталогаВыгрузкиДляОбработки), "ожидаем, что КаталогСодержитИсходникиОбработки(ПутьКаталогаВыгрузкиДляОбработки) это Истина").ЭтоИстина();

КонецПроцедуры

Процедура Тест_ДолженРазобратьФайлыПоЖурналуИзмененийГит() Экспорт
	
	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	ЖурналИзмененийГит = "A	" + ФайлОбработки.Имя+"
		| M	" + "pref-" + ФайлОбработки.Имя;
	
	Исполнитель = ЗагрузитьИсполнителя();
	МассивИмен = Исполнитель.ПолучитьИменаИзЖурналаИзмененийГит(ЖурналИзмененийГит);
	
	Ожидаем.Что(МассивИмен, "Должны были найти измененный файл").Содержит(ФайлОбработки.Имя);
	Ожидаем.Что(МассивИмен, "Должны были найти измененный файл").Содержит("pref-" + ФайлОбработки.Имя);
КонецПроцедуры

Функция КаталогСодержитИсходникиОбработки(Знач Каталог)
	ВыгруженныеФайлы = НайтиФайлы(Каталог, ПолучитьМаскуВсеФайлы());
	ИменаВыгруженныхФайлов = РазвернутьМассивФайловВИменаФайлов(ВыгруженныеФайлы);
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("renames.txt");
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("Form");
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("Макеты");
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("und");
КонецФункции

Функция РазвернутьМассивФайловВИменаФайлов(Знач МассивОбъектовФайл)
	
	ИменаФайлов = Новый Массив;
	Для Каждого Файл Из МассивОбъектовФайл Цикл
		ИменаФайлов.Добавить(Файл.Имя);
	КонецЦикла;
	
	Возврат ИменаФайлов;
	
КонецФункции

Инициализация();
