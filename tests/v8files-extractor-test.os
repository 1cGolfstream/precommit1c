#Использовать tempfiles
#Использовать asserts
#Использовать logos

Перем юТест;
Перем Лог;

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("oscript.app.v8files-extractor");
КонецПроцедуры

Функция ПолучитьСписокТестов(Знач Контекст) Экспорт
	
	юТест = Контекст;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("Тест_ДолженРазложитьФайлОбработкиИзЗаданнойПапки");
	ВсеТесты.Добавить("Тест_ДолженРазложитьКаталогСВложеннымиКаталогами");
	ВсеТесты.Добавить("Тест_ДолженРазобратьФайлыПоЖурналуИзмененийГит");
	ВсеТесты.Добавить("Тест_ДолженСоздатьРепозитарийГит");
	ВсеТесты.Добавить("Тест_ДолженПроверитьНастройкиРепозитарияГит");
	ВсеТесты.Добавить("Тест_ДолженОбработатьИзмененияИзГитДляКаталогаСВложеннымиКаталогами");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПослеЗапускаТеста() Экспорт
	//ВременныеФайлы.Удалить();
КонецПроцедуры

Функция ЗагрузитьИсполнителя()
	
	ИмяКаталога = ТекущийСценарий().Каталог;
	Исполнитель = ЗагрузитьСценарий(ОбъединитьПути(ИмяКаталога,"../v8files-extractor.os"));
	Лог = Логирование.ПолучитьЛог("oscript.app.v8files-extractor");
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	Возврат Исполнитель;
	
КонецФункции

Функция ПолучитьФайлТестовойОбработки()
	
	ИмяКаталога = ТекущийСценарий().Каталог;
	ИмяФайла = "Fixture";
	ИмяФайлаСРасширением = ИмяФайла+".epf";
	
	ПутьФайла = ОбъединитьПути(ИмяКаталога, ИмяФайлаСРасширением);
	ФайлОбработки = Новый Файл(ПутьФайла);
	Ожидаем.Что(ФайлОбработки.Существует(), "Исходный файл должен существовать").ЭтоИстина();
	
	Возврат ФайлОбработки;
	
КонецФункции

Процедура Тест_ДолженРазложитьФайлОбработкиИзЗаданнойПапки() Экспорт

	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();
	
	Исполнитель = ЗагрузитьИсполнителя();
	Исполнитель.РазобратьФайл(Новый Файл(ФайлОбработки.ПолноеИмя), КаталогВыгрузки, ФайлОбработки.Путь);
	
	КаталогИсходников = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ФайлОбработки.ИмяБезРасширения));
	Ожидаем.Что(КаталогИсходников.Существует()).ЭтоИстина();
	Ожидаем.Что(КаталогИсходников.ЭтоКаталог(), "Должны были найти каталог с именем обработки").ЭтоИстина();
	Ожидаем.Что(КаталогСодержитИсходникиОбработки(КаталогИсходников.ПолноеИмя), "ожидаем, что КаталогСодержитИсходникиОбработки(КаталогИсходников.ПолноеИмя) это Истина").ЭтоИстина();
КонецПроцедуры

Процедура Тест_ДолженРазложитьКаталогСВложеннымиКаталогами() Экспорт

	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	ИмяВложенногоКаталога = "1";
	
	КаталогИсходников = ВременныеФайлы.СоздатьКаталог();
	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();

	СоздатьКаталог(ОбъединитьПути(КаталогИсходников, ИмяВложенногоКаталога));
	
	ВложенныйКаталогИсходников = ОбъединитьПути(КаталогИсходников, ИмяВложенногоКаталога);
	ПутьВложеннойОбработки = ОбъединитьПути(ВложенныйКаталогИсходников, ФайлОбработки.Имя);

	КопироватьФайл(ФайлОбработки.ПолноеИмя, ПутьВложеннойОбработки);
	
	ФайлВложеннойОбработки = Новый Файл(ПутьВложеннойОбработки);
	Ожидаем.Что(ФайлВложеннойОбработки.Существует(), "Должны были найти имя вложенной обработки").ЭтоИстина();
	Ожидаем.Что(ФайлВложеннойОбработки.ЭтоФайл(), "Должны были найти признак файла для вложенной обработки").ЭтоИстина();
	
	Исполнитель = ЗагрузитьИсполнителя();
	Исполнитель.РазобратьКаталог(Новый Файл(КаталогИсходников), КаталогВыгрузки, КаталогИсходников);
	
	ВложенныйКаталогВыгрузки = ОбъединитьПути(КаталогВыгрузки, ИмяВложенногоКаталога);
	
	ФайлВложенныйКаталогВыгрузки = Новый Файл(ВложенныйКаталогВыгрузки);
	Ожидаем.Что(ФайлВложенныйКаталогВыгрузки.Существует(), "Должны были найти имя вложенного каталога").ЭтоИстина();
	Ожидаем.Что(ФайлВложенныйКаталогВыгрузки.ЭтоКаталог(), "Должны были найти вложенный каталог").ЭтоИстина();

	ПутьКаталогаВыгрузкиДляОбработки = ОбъединитьПути(ВложенныйКаталогВыгрузки, ФайлОбработки.ИмяБезРасширения);
	Ожидаем.Что(КаталогСодержитИсходникиОбработки(ПутьКаталогаВыгрузкиДляОбработки), "ожидаем, что КаталогСодержитИсходникиОбработки(ПутьКаталогаВыгрузкиДляОбработки) это Истина").ЭтоИстина();

КонецПроцедуры

Процедура Тест_ДолженОбработатьИзмененияИзГитДляКаталогаСВложеннымиКаталогами() Экспорт
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	КаталогПроекта = ОбъединитьПути(ТекущийКаталог(), "..");
	
	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();
	
	СоздатьРепозитарийГит(КаталогВыгрузки, КаталогПроекта);

	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	ИмяВложенногоКаталога = "1";
	
	КаталогИсходников = ВременныеФайлы.СоздатьКаталог();

	ВложенныйКаталогВыгрузки = ОбъединитьПути(КаталогВыгрузки, ИмяВложенногоКаталога);
	СоздатьКаталог(ВложенныйКаталогВыгрузки);
	
	ПутьВложеннойОбработки = ОбъединитьПути(ВложенныйКаталогВыгрузки, ФайлОбработки.Имя);
	Лог.Отладка("ПутьВложеннойОбработки "+ПутьВложеннойОбработки);

	КопироватьФайл(ФайлОбработки.ПолноеИмя, ПутьВложеннойОбработки);
	
	ФайлВложеннойОбработки = Новый Файл(ПутьВложеннойОбработки);
	Ожидаем.Что(ФайлВложеннойОбработки.Существует(), "Должны были найти имя вложенной обработки").ЭтоИстина();
	Ожидаем.Что(ФайлВложеннойОбработки.ЭтоФайл(), "Должны были найти признак файла для вложенной обработки").ЭтоИстина();
	
	КомандаГит = "git add -A .";
	ВыполнитьКомандуГит(КомандаГит);

	КомандаГит = "git status";
	ВыполнитьКомандуГит(КомандаГит);

	КомандаГит = "git commit -m ""init commit""";
	ВыполнитьКомандуГит(КомандаГит);
	
	Исполнитель = ЗагрузитьИсполнителя();
	Исполнитель.ОбработатьИзмененияИзГит(".");
		
	ФайлВложенныйКаталогВыгрузки = Новый Файл(ВложенныйКаталогВыгрузки);
	Ожидаем.Что(ФайлВложенныйКаталогВыгрузки.Существует(), "Должны были найти имя вложенного каталога").ЭтоИстина();
	Ожидаем.Что(ФайлВложенныйКаталогВыгрузки.ЭтоКаталог(), "Должны были найти вложенный каталог").ЭтоИстина();

	ПутьКаталогаВыгрузкиДляОбработки = ОбъединитьПути(ВложенныйКаталогВыгрузки, ФайлОбработки.ИмяБезРасширения);
	Ожидаем.Что(КаталогСодержитИсходникиОбработки(ПутьКаталогаВыгрузкиДляОбработки), "ожидаем, что КаталогСодержитИсходникиОбработки(ПутьКаталогаВыгрузкиДляОбработки) это Истина").ЭтоИстина();

КонецПроцедуры

Процедура Тест_ДолженРазобратьФайлыПоЖурналуИзмененийГит() Экспорт
	
	ФайлОбработки = ПолучитьФайлТестовойОбработки();
	
	ЖурналИзмененийГит = "A	" + ФайлОбработки.Имя+"
		| M	" + "pref-" + ФайлОбработки.Имя;
	
	Исполнитель = ЗагрузитьИсполнителя();
	МассивИмен = Исполнитель.ПолучитьИменаИзЖурналаИзмененийГит(ЖурналИзмененийГит);
	
	Ожидаем.Что(МассивИмен, "Должны были найти измененный файл").Содержит(ФайлОбработки.Имя);
	Ожидаем.Что(МассивИмен, "Должны были найти измененный файл").Содержит("pref-" + ФайлОбработки.Имя);
КонецПроцедуры

Функция КаталогСодержитИсходникиОбработки(Знач Каталог)
	ВыгруженныеФайлы = НайтиФайлы(Каталог, ПолучитьМаскуВсеФайлы());
	ИменаВыгруженныхФайлов = РазвернутьМассивФайловВИменаФайлов(ВыгруженныеФайлы);
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("renames.txt");
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("Form");
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("Макеты");
	Ожидаем.Что(ИменаВыгруженныхФайлов, "Должны были найти выгруженный файл").Содержит("und");
КонецФункции

Функция РазвернутьМассивФайловВИменаФайлов(Знач МассивОбъектовФайл)
	
	ИменаФайлов = Новый Массив;
	Для Каждого Файл Из МассивОбъектовФайл Цикл
		ИменаФайлов.Добавить(Файл.Имя);
	КонецЦикла;
	
	Возврат ИменаФайлов;
	
КонецФункции

Процедура Тест_ДолженСоздатьРепозитарийГит() Экспорт
	
	КаталогПроекта = ОбъединитьПути(ТекущийКаталог(), "..");
	
	КаталогРепо = ВременныеФайлы.СоздатьКаталог();
	
	СоздатьРепозитарийГит(КаталогРепо, КаталогПроекта);
КонецПроцедуры

Процедура Тест_ДолженПроверитьНастройкиРепозитарияГит() Экспорт
	Перем КодВозврата;
	
	КаталогПроекта = ОбъединитьПути(ТекущийКаталог(), "..");
	
	КаталогРепо = ВременныеФайлы.СоздатьКаталог();
	
	СоздатьРепозитарийГит(КаталогРепо, КаталогПроекта);
	
	Исполнитель = ЗагрузитьИсполнителя();
	Исполнитель.ПроверитьНастройкиРепозитарияГит();
КонецПроцедуры

Процедура СоздатьРепозитарийГит(Знач КаталогРепо, КаталогПроекта) 
	Перем КодВозврата;

	// КаталогРепо = "W:\1dst";
	
	УстановитьТекущийКаталог(КаталогРепо);

	// Лог.Информация("Запускаю git init");
	// Вывод = ПолучитьВыводПроцесса("git init", КодВозврата);
	// Лог.Отладка("Вывод git init: " + Вывод);
	// Ожидаем.Что(КодВозврата, "Код возврата должен быть 0, а это не так").Равно(0);
	ВыполнитьКомандуГит("git init");

	// КодВозврата = Неопределено;
	КомандаУстановкиСостояния = "git config --local core.quotepath false";
	// Вывод = ПолучитьВыводПроцесса(КомандаУстановкиСостояния, КодВозврата);
		// Ожидаем.Что(КодВозврата, "Должен быть нулевой КодВозврата, а это не так").Равно(0);
		// Ожидаем.Что(Вывод, "Должен быть нулевой КодВозврата, а это не так").Равно("");
	ВыполнитьКомандуГит(КомандаУстановкиСостояния);
	
	КаталогHooks = Новый Файл(ОбъединитьПути(КаталогРепо, ".git", "hooks"));
	Ожидаем.Что(КаталогHooks.Существует(), "Должен существовать исходный каталог сервисной ИБ, а это не так").ЭтоИстина();
	
	КаталогСервиснойИБ = Новый Файл(ОбъединитьПути(КаталогПроекта, "ibService"));
	Каталог_v8Reader = Новый Файл(ОбъединитьПути(КаталогПроекта, "v8Reader"));
	
	КаталогСервиснойИБ_конечный = Новый Файл(ОбъединитьПути(КаталогHooks.ПолноеИмя, "ibService"));
	ПересоздатьКаталог(КаталогСервиснойИБ_конечный);

	КопироватьДеревоФайлов(КаталогСервиснойИБ.ПолноеИмя, КаталогСервиснойИБ_конечный.ПолноеИмя);
		Ожидаем.Что(КаталогСервиснойИБ_конечный.Существует(), "Должен существовать конечный каталог сервисной ИБ, а это не так").ЭтоИстина();
	
	ФайлСервиснойИБ = Новый Файл(ОбъединитьПути(КаталогСервиснойИБ_конечный.ПолноеИмя, "1Cv8.1CD"));
		Ожидаем.Что(Новый Файл(ФайлСервиснойИБ), "Должен существовать файл сервисной ИБ, а это не так").ЭтоИстина();

	Каталог_v8Reader_конечный = Новый Файл(ОбъединитьПути(КаталогHooks.ПолноеИмя, "v8Reader"));
	ПересоздатьКаталог(Каталог_v8Reader_конечный);

	Файл_v8Reader_конечный = Новый Файл(ОбъединитьПути(Каталог_v8Reader_конечный.ПолноеИмя, "V8Reader.epf"));
	КопироватьФайл(ОбъединитьПути(Каталог_v8Reader.ПолноеИмя, "V8Reader.epf"), Файл_v8Reader_конечный.ПолноеИмя);
		Ожидаем.Что(Файл_v8Reader_конечный.Существует(), "Должен существовать Файл_v8Reader_конечный, а это не так").ЭтоИстина();

	Файл_pre_commit_конечный = Новый Файл(ОбъединитьПути(КаталогHooks.ПолноеИмя, "pre-commit"));
	КопироватьФайл(ОбъединитьПути(КаталогПроекта, "pre-commit"), Файл_pre_commit_конечный.ПолноеИмя);
		Ожидаем.Что(Файл_pre_commit_конечный.Существует(), "Должен существовать Файл_pre_commit_конечный, а это не так").ЭтоИстина();

	Файл_сценария_исходный = Новый Файл(ОбъединитьПути(КаталогПроекта, "v8files-extractor.os"));
	Файл_сценария_конечный = Новый Файл(ОбъединитьПути(КаталогHooks.ПолноеИмя, Файл_сценария_исходный.Имя));
	
	КопироватьФайл(Файл_сценария_исходный.ПолноеИмя, Файл_сценария_конечный.ПолноеИмя);
		Ожидаем.Что(Файл_сценария_конечный.Существует(), "Должен существовать Файл_сценария_конечный, а это не так").ЭтоИстина();
КонецПроцедуры

Процедура ПересоздатьКаталог(Каталог)
	Если Каталог.Существует() Тогда
		УдалитьФайлы(Каталог.ПолноеИмя);
	КонецЕсли;
	СоздатьКаталог(Каталог.ПолноеИмя);
КонецПроцедуры

Процедура КопироватьДеревоФайлов(ИсходныйКаталог, КонечныйКаталог)
	Лог.Отладка("	КопироватьДеревоФайлов	ИсходныйКаталог :"+ИсходныйКаталог);
	Лог.Отладка("	КопироватьДеревоФайлов	КонечныйКаталог :"+КонечныйКаталог);
	Файлы = НайтиФайлы(ИсходныйКаталог, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			// Лог.Отладка("		Файл.ПолноеИмя: " + Файл.ПолноеИмя);
			
			НовыйКонечныйКаталог = Новый Файл(ОбъединитьПути(КонечныйКаталог, Файл.Имя));
			// Лог.Отладка("		НовыйКонечныйКаталог.ПолноеИмя: " + НовыйКонечныйКаталог.ПолноеИмя);
			Если Не НовыйКонечныйКаталог.Существует() Тогда
				Лог.Отладка("Создаю каталог "+НовыйКонечныйКаталог.ПолноеИмя);
				СоздатьКаталог(НовыйКонечныйКаталог.ПолноеИмя);
			КонецЕсли;
			КопироватьДеревоФайлов(Файл.ПолноеИмя, НовыйКонечныйКаталог.ПолноеИмя);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ОбъединитьПути(КонечныйКаталог, Файл.Имя));
		// ИначеЕсли ТипФайлаПоддерживается(Файл) Тогда
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВыполнитьКомандуГит(КомандаГит, КодВозврата = Неопределено, ПроверятьНулевойКодВозврата = Истина)
	
	Лог.Информация("Запускаю "+КомандаГит);
	Вывод = ПолучитьВыводПроцесса(КомандаГит, КодВозврата);
	Лог.Информация("	Вывод команды гит: " + Вывод);
	Если ПроверятьНулевойКодВозврата Тогда
		Ожидаем.Что(КодВозврата, "Код возврата `"+КомандаГит+"` должен быть 0, а это не так").Равно(0);
	КонецЕсли;
	Возврат Вывод;
КонецФункции

Функция ПолучитьВыводПроцесса(Знач КоманднаяСтрока, КодВозврата)
	
	// Это для dev версии 1.0.11
	Процесс = СоздатьПроцесс(КоманднаяСтрока, , Истина,, КодировкаТекста.UTF8);
	Процесс.Запустить();
	Вывод = "";
	
	Процесс.ОжидатьЗавершения();
	
	Вывод = Вывод + Процесс.ПотокВывода.Прочитать();
	Вывод = Вывод + Процесс.ПотокОшибок.Прочитать();
	
	КодВозврата = Процесс.КодВозврата;
	
	// ЛогФайл = ВременныеФайлы.НовоеИмяФайла();
	// СтрокаЗапуска = "cmd /C """ + КоманднаяСтрока + " > """ + ЛогФайл + """ 2>&1""";
	// Лог.Отладка(СтрокаЗапуска);
	// ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	// Лог.Отладка("Код возврата: " + КодВозврата);
	// ЧтениеТекста = Новый ЧтениеТекста(ЛогФайл, "utf-8");
	// Вывод = ЧтениеТекста.Прочитать();
	// ЧтениеТекста.Закрыть();
	// ВременныеФайлы.УдалитьФайл(ЛогФайл);
	
	Возврат Вывод;
	
КонецФункции

Инициализация();
